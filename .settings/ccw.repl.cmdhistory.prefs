cmdhistory=["(insert-new-client {\\r\\n                         \:name \\"Pera\\"\\r\\n                         \:parent-name \\"Petar\\"\\r\\n                         \:lastname \\"Peri\u0107\\"\\r\\n                         \:email \\"pera@peric.com\\"\\r\\n                         \:phone \\"+38164111111\\"\\r\\n                         \:adress {\\r\\n                                  \:street \\"Petrovi\u0107a\\"\\r\\n                                  \:number \\"17\\"\\r\\n                                  \:place \\"Ba\u010Dki Petrovac\\"\\r\\n                                  } \\r\\n                         })" "(ns databasebroker)" "(insert-new-client {\\r\\n                         \:name \\"Pera\\"\\r\\n                         \:parent-name \\"Petar\\"\\r\\n                         \:lastname \\"Peri\u0107\\"\\r\\n                         \:email \\"pera@peric.com\\"\\r\\n                         \:phone \\"+38164111111\\"\\r\\n                         \:adress {\\r\\n                                  \:street \\"Petrovi\u0107a\\"\\r\\n                                  \:number \\"17\\"\\r\\n                                  \:place \\"Ba\u010Dki Petrovac\\"\\r\\n                                  } \\r\\n                         })" "(insert-new-client {\\r\\n                     \:name \\"Milo\u0161\\"\\r\\n                     \:parent-name \\"Nikola\\"\\r\\n                     \:lastname \\"Nikoli\u0107\\"\\r\\n                     \:email \\"milos@email.com\\"\\r\\n                     \:phone \\"+38164111112\\"\\r\\n                     \:adress {\\r\\n                              \:street \\"Vojvo\u0111anska\\"\\r\\n                              \:number \\"234\\"\\r\\n                              \:place \\"Ba\u010Dki Petrovac\\"\\r\\n                              } \\r\\n                     })" " (insert-new-client {\\r\\n             \:name \\"Du\u0161an\\"\\r\\n             \:parent-name \\"Nemanja\\"\\r\\n             \:lastname \\"\u0110or\u0111evi\u0107\\"\\r\\n             \:email \\"dusan@email.com\\"\\r\\n             \:phone \\"+38164111113\\"\\r\\n             \:adress {\\r\\n                      \:street \\"Vojvo\u0111anska\\"\\r\\n                      \:number \\"117\\"\\r\\n                      \:place \\"Ba\u010Dki Petrovac\\"\\r\\n                      } \\r\\n             })" "(get-all-client)" "\\n((get-all-client) 1)" "\\n(into [](get-all-client))" "\\n((into [](get-all-client)) 0)" "\\n((into [](get-all-client)) 1)" "\\n((into [](get-all-client)) 3)" "\\n((into [](get-all-client)) 2)" "(defn a [a] println a)" "(databasebroker/a 1)" "(databasebroker/a \\"Hello\\")" "(defn a [& a] println a)" "(databasebroker/a \\"Hello\\")" "(databasebroker/a)" "(defn a [& a] (if (nil? a) (println \\"patam is nill\\")))" "\\n(defn a [& a] (if (nil? a) (println \\"patam is nill\\") (println a)))" "(databasebroker/a )" "(databasebroker/a \\"LLL\\")" "(get-client-by-id 1)" "(println(get-client-by-id 1))" "(println(get-client-by-id \\"1\\"))" "(println(get-client-by-id 1))" "get-all-clients" "(get-all-clients)" "(databasebroker/get-all-clients)" "(somnium.congomongo/destroy\! \:client {\:_id nil})" "(databasebroker/get-all-clients)" "(defn validate-email\\r\\n  [email]\\r\\n  (let [pattern \#\\"[a-z0-9\!\#$%&'*+/\=?^_`{|}~-]+(?\:\\\\.[a-z0-9\!\#$%&'*+/\=?^_`{|}~-]+)*@(?\:[a-z0-9](?\:[a-z0-9-]*[a-z0-9])?\\\\.)+[a-z0-9](?\:[a-z0-9-]*[a-z0-9])?\\"]\\r\\n    (and (string? email) (re-matches pattern email))))" "(validate-email test@gmail.com)" "(validate-email \\"test@gmail.com\\")" "(validate-email \\"testgmail.com\\")" "(defn client-not-have-appication-for-property [id]\\r\\n  \\"Find all client not have submit aplication for propetry.\\"\\r\\n  (let [applications (fetch \:application \:where {\:property-id id} )]\\r\\n  (println applications)\\r\\n  (if (nil? applications)\\r\\n    (fetch \:client)\\r\\n    (fetch \:client \:where {\:_id (applications \:clent-id)} )\\r\\n    )))" "(client-not-have-appication-for-property 6)" "\\n(databasebroker/client-not-have-appication-for-property 6)" "\\n(let [applications (fetch \:application \:where {\:property-id 6} )]\\r\\n    (fetch \:client \:where {\:_id { \:not(applications \:clent-id)}} )    \\r\\n    )" "(ns databasebroker)" "\\n(let [applications (fetch \:application \:where {\:property-id 6} )]\\r\\n    (fetch \:client \:where {\:_id { \:not(applications \:clent-id)}} )    \\r\\n    )" "\\n(let [applications (fetch \:application \:where {\:property-id 6} )]\\r\\n    (fetch \:client \:where {\:_id { \:not [6 5]}} )    \\n    \\r\\n    )" "\\n(let [applications (fetch \:application \:where {\:property-id 6} )]\\r\\n    (fetch \:client \:where {\:_id { \:not (vec(applications \:clent-id))}} )    \\r\\n    )" "\\n(let [applications (fetch \:application \:where {\:property-id 6} )]\\r\\n    (fetch \:client \:where {\:_id { \:not (vec(1 2 3) )}} )    \\r\\n    )" "\\n(let [applications (fetch \:application \:where {\:property-id 6} )]\\r\\n    (fetch \:client \:where {\:_id { \:not [1 2 3]}} )    \\r\\n    )" "(fetch \:client \:where {\:_id { \:not [1 2 3]}} )" "(fetch \:client \:where {\:_id 1} )" "(fetch \:client \:where {\:_id { \:not 1}} )" "(fetch \:client \:where {\:_id {\:nin 1}} )" "(fetch \:client \:where {\:_id {$nin 1}} )" "(fetch \:client \:where {\:_id \\"{$not 1}\\"} )" "(fetch \:client \:where {\:_id \\"1\\"} )" "(fetch \:client \:where {\:_id 1} )" "\\n\\n(let [applications (fetch \:application \:where {\:property-id 1} )\\r\\n        clients (fetch \:client)]  \\r\\n  (if (nil? applications)\\r\\n    (for [application applications]      \\r\\n      (remove (nil? (clients (\:_id (application \:clent-id)))) clients)       \\r\\n      )\\r\\n    (clients)\\r\\n    ))" "(fetch \:application \:where {\:property-id 1})" "   (def application {\\r\\n\\t\\t\:submission-date nil\\r\\n\\t\\t\:informed-with-offering 1\\r\\n\\t\\t\:date-of-visite-offering nil\\r\\n\\t\\t\:deposit 1                                       \\r\\n\\t\\t\:property-id 6                     \\r\\n\\t  \:clent-id 1})" "(databasebroker/application)" "\\ndatabasebroker/application" "(fetch-one \:application)" "(fetch-one \:property)" "   (def application {\\r\\n\\t\\t\:submission-date nil\\r\\n\\t\\t\:informed-with-offering 1\\r\\n\\t\\t\:date-of-visite-offering nil\\r\\n\\t\\t\:deposit 1                                       \\r\\n\\t\\t\:property-id 6                    \\r\\n\\t  \:clent-id 1})" "(insert-new-application application)" "(fetch-one \:application)" "(get-property-by-id 5)" "(get-property-by-id 6)" "(get-property-by-id 5)" "(get-property-by-id 5)\\n(get-client-by-id 1)" "   (def application {\\r\\n\\t\\t\:submission-date nil\\r\\n\\t\\t\:informed-with-offering 1\\r\\n\\t\\t\:date-of-visite-offering nil\\r\\n\\t\\t\:deposit 1                                       \\r\\n\\t\\t\:property (get-property-by-id 5)\\r\\n\\t  \:clent (get-client-by-id 1)})" "application" "(insert-new-application application)" "(fetch-one \:application)" "(maping-application application)" "\\napplication" "   (def application {\\r\\n\\t\\t\:submission-date nil\\r\\n\\t\\t\:informed-with-offering 1\\r\\n\\t\\t\:date-of-visite-offering nil\\r\\n\\t\\t\:deposit 1                                       \\r\\n\\t\\t\:property (get-property-by-id 5)\\r\\n\\t  \:client (get-client-by-id 1)})" "(maping-application application)" "(insert-new-application application)" "(frtch application)" "(frtch \:application)" "(fetch \:application)" "(somnium.congomongo/destroy\! \:application  {\:_id 1})" "(somnium.congomongo/destroy\! \:application  {\:_id 2})" "(fetch \:application)" "fetch \:application \:where {\:property-id 5}" "(fetch \:application \:where {\:property-id 5})" "\\n(let [applications (fetch \:application \:where {\:property-id 5} )\\r\\n        clients (fetch \:client)]  \\r\\n  (if (nil? applications)\\r\\n    (for [application applications]\\r\\n      (remove (nil? (clients (\:_id (application \:clent-id)))) clients)       \\r\\n      )\\r\\n    (clients)\\r\\n    ))" "\\n(def applications (fetch \:application \:where {\:property-id 5} ))" "applications" "\\n(def clients (fetch \:client))" "(for [application applications] \\r\\n      \#_(remove (nil? (clients (\:_id (application \:clent-id)))) clients) \\n      application\\r\\n      )" "(for [application applications] \\r\\n      (remove (nil? (clients (\:_id (application \:clent-id)))) clients) \\n      \\r\\n      )" "(clients (\:_id 1))" "\\nclients" "(.indexOf clients (\:_id 1))" "(.indexOf clients ((fn[x] (\= 1 (x \:_id) ))))" "(.indexOf clients ((fn[x] (\=\= 1 (x \:_id) ))))" "(.indexOf clients (fn[x] (\=\= 1 (x \:_id) )))" "(.indexOf clients (fn[x] (\= 1 (x \:_id) )))" "(some \#{1} [1 2 3 4])" "(some \#{3} [1 2 3 4])" "(some \#{3} [1 2 s 4])" "(some \#{3} [1 2 \\"s\\" 4])" "(some \#{\\"s\\"} [1 2 \\"s\\" 4])" "(some \#{(> 2)} [1 2 3 4])" "(filter (fn [x a]\\r\\n  (\= (count (x \:_id)) a)))" "(defn filterVector(filter (fn [x a]\\r\\n  (\= (count (x \:_id)) a))))" "(defn filterVector\\n  [x a]\\n  (filter (fn [x a]\\r\\n  (\= (count (x \:_id)) a))))" "(filterVector clients 1)" "(defn filterVector\\n  [client a]\\n  (filter (fn [x a]\\r\\n  (\= (count (x \:_id)) a))\\n          clients))" "(filterVector clients 1)" "(defn filterVector\\n  [client a]\\n  (filter (fn [x]\\r\\n  (\= (count (x \:_id)) a))\\n          clients))" "(filterVector clients 1)" "(defn filterVector\\n  [client]\\n  (filter (fn [x]\\r\\n  (\= (count (x \:_id)) 1))\\n          clients))" "(filterVector clients 1)" "(filterVector clients)" "\\n  (filter (fn [x]\\r\\n  (\= (count (x \:_id)) 1))\\n          clients)" "\\n  (filter (fn [x]\\r\\n  (\= (count x ) 1))\\n          [1 2 3])" "\\n  (filter (fn [x]\\r\\n  (\= (count x ) 1))\\n          [1 2 34])" "\\n  (filter (fn [x]\\r\\n  (\= (count x ) 1))\\n          [1 \\"ss\\" 34])" "\\n  (filter (fn [x]\\r\\n  (\= (count x ) 1))\\n          [\\"w\\"\\"ss\\" \\"\\"])" "\\n  (filter (fn [x]\\r\\n  (\= (x \:_id ) 1))\\n          clients)" "\\n  (filter (fn [x]\\r\\n  (\= (x \:_id ) 3))\\n          clients)" "(defn filterVector\\n  [client a]\\n  (filter (fn [x]\\r\\n  (\= (x \:_id) a))\\n          clients))" "(filterVector clients 1)" "(.indexOf clients (filterVector clients 1))" "(remowe clients (filterVector clients 1))" "(remowe (filterVector clients 1) clients)" "(remove (filterVector clients 1) clients)" "(filterVector clients 1)" "(remove(filterVector clients 1) clients)" "clients" "(vec? clients)" "(vector? clients)" "(map? clients)" "(list? clients)" "(seq? clients)" "(vector? (into[] clients))" "(def clients-vec clients)\\n(remove(filterVector clients 1) clients-vec)" "(def clients-vec clients)\\n(remove(filterVector clients-vec 1) clients-vec)" "(def clients-vec clients)" "\\n(remove(filterVector clients-vec 1) clients-vec)" "\\nclients-vec" "(def clients-vec (into []clients))" "\\n(remove(filterVector clients-vec 1) clients-vec)" "\\n(remove(filterVector clients 1) clients-vec)" "\\nclients-vec" "\\n(remove {\:address\\r\\n  {\:place \\"Ba\u010Dki Petrovac\\",\\r\\n   \:number \\"1178\\",\\r\\n   \:street \\"Vojvo\u0111anska\\"},\\r\\n  \:phone \\"+38164111113\\",\\r\\n  \:email \\"dusan1@email.com\\",\\r\\n  \:lastname \\"\u0110or\u0111evi\u0107\\",\\r\\n  \:parent-name \\"Nemanja\\",\\r\\n  \:name \\"Du\u0161an\\",\\r\\n  \:_id 3} clients-vec)" "(defn filterVector\\n  [client a]\\n  (filter (fn [x]\\r\\n  (<> (x \:_id) a))\\n          clients))" "(defn filterVector\\n  [client a]\\n  (filter (fn [x]\\r\\n  (\!\= (x \:_id) a))\\n          clients))" "(defn filterVector\\n  [client a]\\n  (filter (fn [x]\\r\\n  (not\= (x \:_id) a))\\n          clients))" "\\n(filterVector clients 1)" "(client-not-have-appication-for-property 1)" "\\n(filterVector clients 1)" "\\napplications" "clients" "\\napplications (fetch \:application \:where {\:property-id 5} )" "\\n(filter (fn [x]\\r\\n\\t\\t  (not\= (x \:_id) ((first applications) \:_id)))\\r\\n\\t\\t          clients)" "clients" "\\n(filter (fn [x]\\r\\n\\t\\t  (not\= (x \:_id) ((first applications) \:_id)))\\r\\n\\t\\t          clients)" "(firt aplications)" "\\r\\n\\t(first applications)" "\\n(filter (fn [x]\\r\\n\\t\\t  (not\= (x \:_id) ((first applications) \:clent-id)))\\r\\n\\t\\t          clients)" "(client-not-have-appication-for-property 5)" "\\n(let [applications (fetch \:application \:where {\:property-id 5} )\\r\\n        clients (fetch \:client)]  \\r\\n  (if (nil? applications)\\r\\n    (for [application applications]      \\r\\n\\t\\t  (filter (fn [x]\\r\\n\\t\\t  (not\= (x \:_id) (application \:_id)))\\r\\n\\t\\t          clients)    \\r\\n      )\\r\\n    (clients)\\r\\n    ))" "\\r\\n(let [applications (fetch \:application \:where {\:property-id 5} )\\r\\n        clients (fetch \:client)]  \\r\\n  (if (nil? applications)\\n    true\\n    false\\n    )" "\\r\\n(let [applications (fetch \:application \:where {\:property-id 5} )\\r\\n        clients (fetch \:client)]  \\r\\n  (if (nil? applications)\\n    (println \\"true\\")\\n    (println \\"false\\")\\n    )" "\\r\\n(let [applications (fetch \:application \:where {\:property-id 5} )\\r\\n        clients (fetch \:client)]  \\r\\n  (if (nil? applications)\\n    (println \\"true\\")\\n    (println \\"false\\")\\n    ))" "\\r\\n(let [applications (fetch \:application \:where {\:property-id 5} )\\r\\n        clients (fetch \:client)]  \\r\\n  (if (nil? applications)\\n     (clients)\\n    (println \\"false\\")\\n    ))" "\\r\\n(let [applications (fetch \:application \:where {\:property-id 5} )\\r\\n        clients (fetch \:client)]  \\r\\n  (if (nil? applications)\\n     clients\\n    (println \\"false\\")\\n    ))" "\\r\\n(let [applications (fetch \:application \:where {\:property-id 5} )\\r\\n        clients (fetch \:client)]  \\r\\n  (if (nil? applications)\\n     clients\\n    clients\\n    ))" "\\r\\n(let [applications (fetch \:application \:where {\:property-id 5} )\\r\\n        clients (fetch \:client)]  \\r\\n  (if (nil? applications)\\n     clients\\n    (for [application applications]\\r\\n\\t\\t  (filter (fn [x]\\r\\n\\t\\t  (not\= (x \:_id) (application \:clent-id)))\\r\\n\\t\\t          clients))\\n    ))" "(client-not-have-appication-for-property 5)" "\\n\\n(for [client (client-not-have-appication-for-property 5)]\\n  (println client)\\n  )" "\\n\\n(for [client (into [](client-not-have-appication-for-property 5))]\\n  (println client)\\n  )" "\\n\\n(for [client (into [] (first(client-not-have-appication-for-property 5)))]\\n  (println client)\\n  )" "\\n\\n(for [client (into [] (first(client-not-have-appication-for-property 5)))]\\n  ;(println client)\\n  )" "\\n\\n(for [client (into [] (first(client-not-have-appication-for-property 5)))]\\n  (println client \:_id)\\n  )" "\\n\\n(into [] (first(client-not-have-appication-for-property 5)))" "(client-not-have-appication-for-property 5)" "\\n\\n(for [client (into [] (first(client-not-have-appication-for-property 5)))]\\n  (println client \:_id)\\n  )" "(client-not-have-appication-for-property 5)" "(def a (client-not-have-appication-for-property 5))" "a" "(first a)" "((first a) 0)" "(seq?(first a) )" "(for x(first a) \\n  (println x)\\n  )" "(for [x (first a)]\\n  (println x)\\n  )" "(first(first a) )" "(first a)" "(for [x (first a)]\\n  (println x)\\n  )" "(for [x (first a)]\\n  (println x)\\n    (println \\"Hell\\")\\n  )" "(for [x (first a)]\\n  (do(println x)\\n   (println \\"Hell\\"))\\n  )" "(client-not-have-appication-for-property 5)" "(for x(client-not-have-appication-for-property 5)\\n  (println x)\\n  )" "(for [x (client-not-have-appication-for-property 5)]\\n  (println x)\\n  )" "(for [x (client-not-have-appication-for-property 5)]\\n  (println x \:name)\\n  )" "(for [x (client-not-have-appication-for-property 5)]\\n  (println (x \:name))\\n  )" "(get-client-by-id 5)" "(get-client-by-id 2)" "        (insert-new-application (maping-application-form                 \\r\\n                              nil\\r\\n                            (parse-int property-id) \\r\\n                            (parse-int client-id) \\r\\n                              informed-with-offering \\r\\n                            deposit\\r\\n                              date-of-visite-offering\\r\\n                              submission-date))" "\\n(insert-new-application (maping-application-form                 \\r\\n                              nil\\r\\n                            (parse-int 5) \\r\\n                            (parse-int 1) \\r\\n                              1 \\r\\n                              1\\r\\n                              2016-01-24\\r\\n                              nil))" "\\n(insert-new-application (maping-application-form                 \\r\\n                              nil\\r\\n                              5\\r\\n                              1\\r\\n                              1 \\r\\n                              1\\r\\n                              2016-01-24\\r\\n                              nil))" "\\n(insert-new-application (maping-application-form                 \\r\\n                              nil\\r\\n                              5\\r\\n                              1\\r\\n                              1 \\r\\n                              1\\r\\n                              \\"2016-01-24\\"\\r\\n                              nil))" "\\n(insert-new-application (maping-object/maping-application-form                 \\r\\n                              nil\\r\\n                              5\\r\\n                              1\\r\\n                              1 \\r\\n                              1\\r\\n                              \\"2016-01-24\\"\\r\\n                              nil))" "(fetch-one \:application)" "\\n(insert-new-application (maping-object/maping-application-form                 \\r\\n                              nil\\r\\n                              5\\r\\n                              1\\r\\n                              1 \\r\\n                              1\\r\\n                              \\"2016-01-24\\"\\r\\n                              ))" "(fetch-one \:application)" "(str \\"/applicationslist?id\=\\" 5)" "(response/redirect (str \\"/applicationslist?id\=\\" 5))" "(get-applications-for-property 5)" "       \\n(maping-application-form                 \\r\\n                          nil\\r\\n                          (parse-int 5) \\r\\n                          (parse-int 1) \\r\\n                          1 \\r\\n                          1\\r\\n                          2016-01-02\\r\\n                          nil)" "       \\n(maping-application-form                 \\r\\n                          nil\\r\\n                          5\\r\\n                          1\\r\\n                          1 \\r\\n                          1\\r\\n                          2016-01-02\\r\\n                          nil)" "       \\n(maping-application-form nil 5 1 1 1 \\"2016-01-02\\" nil)" "       \\n(maping-object/maping-application-form nil 5 1 1 1 \\"2016-01-02\\" nil)" "       \\n(insert-new-application(maping-object/maping-application-form nil 5 2 1 1 \\"2016-01-02\\" nil))" "fetch \:property" "(fetch \:property)" "(fetch \:application)" "\\n(somnium.congomongo/destroy\! \:application)" "       \\n(insert-new-application(maping-object/maping-application-form nil 5 2 1 1 \\"2016-01-02\\" nil))" "       \\n(maping-object/maping-application-form nil 5 2 1 1 \\"2016-01-02\\" nil)" "       \\n(somnium.congomongo/drop-coll\! \:application )" "       \\n(somnium.congomongo/drop-coll\! application )" "       \\n(somnium.congomongo/drop-coll\! \:application )" "       \\n(somnium.congomongo/drop-coll\! \\"application\\" )" "(fetch \:application)" "(fetch \:client)" "(fetch \:application \:where {\:property-id id})" "(fetch \:application \:where {\:property-id 5})" "(nil?(fetch \:application \:where {\:property-id 5}))" "(seq?(fetch \:application \:where {\:property-id 5}))" "(empty?(fetch \:application \:where {\:property-id 5}))" "(fetch \:application)" "       \\n(somnium.congomongo/drop-coll\! \\"application\\" )" "(fetch \:application)" "       \\n(somnium.congomongo/drop-coll\! \\"application\\" )" "(client-not-have-appication-for-property 5)" "\\n(fetch \:application \:where {\:property-id 5})" "\\n(empty? (fetch \:application \:where {\:property-id 5}))" " (let [applications (fetch \:application \:where {\:property-id id} )\\r\\n        clients (fetch \:client)]  \\r\\n  (if (empty? applications)\\r\\n     clients\\r\\n    (first (for [application applications]\\r\\n\\t\\t  (filter (fn [x]\\r\\n\\t\\t  (not\= (x \:_id) (application \:clent-id)))\\r\\n\\t\\t          clients)))" " (let [applications (fetch \:application \:where {\:property-id id} )\\r\\n        clients (fetch \:client)]  \\r\\n  (if (empty? applications)\\r\\n     clients\\r\\n    (first (for [application applications]\\r\\n\\t\\t  (filter (fn [x]\\r\\n\\t\\t  (not\= (x \:_id) (application \:clent-id)))\\r\\n\\t\\t          clients)))))" "\\n(let [applications (fetch \:application \:where {\:property-id 5} )\\r\\n        clients (fetch \:client)]  \\r\\n  (if (empty? applications)\\r\\n     clients\\r\\n    (first (for [application applications]\\r\\n\\t\\t  (filter (fn [x]\\r\\n\\t\\t  (not\= (x \:_id) (application \:clent-id)))\\r\\n\\t\\t          clients)))))" "\\n(let [applications (fetch \:application \:where {\:property-id 5} )\\r\\n        clients (fetch \:client)]  \\r\\n  (if (empty? applications)\\r\\n    (first (for [application applications]\\r\\n\\t\\t  (filter (fn [x]\\r\\n\\t\\t  (not\= (x \:_id) (application \:clent-id)))\\r\\n\\t\\t          clients)))))" "\\n(let [applications (fetch \:application \:where {\:property-id 5} )\\r\\n        clients (fetch \:client)]  \\r\\n\\r\\n    (first (for [application applications]\\r\\n\\t\\t  (filter (fn [x]\\r\\n\\t\\t  (not\= (x \:_id) (application \:clent-id)))\\r\\n\\t\\t          clients))))" "\\r\\n(for [application (fetch \:application \:where {\:property-id 5} )]\\r\\n\\t\\t  (filter (fn [x]\\r\\n\\t\\t  (not\= (x \:_id) (application \:clent-id)))\\r\\n\\t\\t          (fetch \:client)))" "\\n(def clients (fetch \:client))\\r\\n(for [application (fetch \:application \:where {\:property-id 5} )]\\r\\n\\t\\t  (filter (fn [x]\\r\\n\\t\\t  (not\= (x \:_id) (application \:clent-id)))\\r\\n\\t\\t          clients))" "\\n(def clients (fetch \:client))\\r\\n(for [application (fetch \:application \:where {\:property-id 5} )]\\r\\n\\t\\t  (filter (fn [x]\\r\\n\\t\\t  (not\= (x \:_id) (application \:client-id)))\\r\\n\\t\\t          clients))" "(client)" "\\n(fetch \:client)" "\\n(fetch \:application)" "\\n(let [applications (fetch \:application \:where {\:property-id 5} )\\r\\n        clients (fetch \:client)]  \\r\\n  (if (empty? applications)\\r\\n     clients\\r\\n    (first (for [application applications]\\r\\n\\t\\t  (filter (fn [x]\\r\\n\\t\\t  (not\= (x \:_id) (application \:client-id)))\\r\\n\\t\\t          clients)))\\r\\n    ))" "\\n(let [applications (fetch \:application \:where {\:property-id 5} )\\r\\n        clients (fetch \:client)]  \\r\\n  (if (empty? applications)\\r\\n     clients\\r\\n     (for [application applications]\\r\\n\\t\\t  (filter (fn [x]\\r\\n\\t\\t  (not\= (x \:_id) (application \:client-id)))\\r\\n\\t\\t          clients)))\\r\\n    )" "\\n(let [applications (fetch \:application \:where {\:property-id 5} )\\r\\n        clients (fetch \:client)]  \\n  (remowe (first clients) clients)\\r\\n    )" "\\n(let [applications (fetch \:application \:where {\:property-id 5} )\\r\\n        clients (fetch \:client)]  \\n  (remove (first clients) clients)\\r\\n    )" "\\n(let [applications (fetch \:application \:where {\:property-id 5} )\\r\\n        clients (fetch \:client)]  \\n  (first clients)\\r\\n    )" "\\n(let [applications (fetch \:application \:where {\:property-id 5} )\\r\\n        clients (fetch \:client)]  \\n  (remove (first clients) clients)\\r\\n    )" "(seq? (fetch \:client))" "\\n  (let [applications (fetch \:application \:where {\:property-id id} )\\r\\n        clients (fetch \:client)]  \\r\\n  (if (empty? applications)\\r\\n     clients\\r\\n     (for [application applications]\\r\\n\\t\\t  (remove (fn [x]\\r\\n\\t\\t  (\= (x \:_id) (application \:client-id)))\\r\\n\\t\\t          clients)))\\r\\n    )" "\\n  (let [applications (fetch \:application \:where {\:property-id 5} )\\r\\n        clients (fetch \:client)]  \\r\\n  (if (empty? applications)\\r\\n     clients\\r\\n     (for [application applications]\\r\\n\\t\\t  (remove (fn [x]\\r\\n\\t\\t  (\= (x \:_id) (application \:client-id)))\\r\\n\\t\\t          clients)))\\r\\n    )" "  (let [applications (fetch \:application \:where {\:property-id id} )\\r\\n        clients (fetch \:client)]  \\r\\n  (if (empty? applications)\\r\\n     clients\\r\\n    (let [clients(first (for [application applications]\\r\\n\\t\\t  (filter (fn [x]\\r\\n\\t\\t  (not\= (x \:_id) (application \:client-id)))\\r\\n\\t\\t          clients)))])\\r\\n    ))" "  \\n  \\n  (let [applications (fetch \:application \:where {\:property-id 5} )\\r\\n        clients (fetch \:client)]  \\r\\n  (if (empty? applications)\\r\\n     clients\\r\\n    (let [clients(first (for [application applications]\\r\\n\\t\\t  (filter (fn [x]\\r\\n\\t\\t  (not\= (x \:_id) (application \:client-id)))\\r\\n\\t\\t          clients)))])\\r\\n    ))" "(let [applications (fetch \:application \:where {\:property-id id} )\\r\\n        clients (fetch \:client)]  \\r\\n  (if (empty? applications)\\r\\n     clients\\r\\n    (first (for [application applications]\\r\\n\\t\\t  (filter (fn [x]\\r\\n\\t\\t  (not\= (x \:_id) (application \:client-id)))\\r\\n\\t\\t          clients)))\\r\\n    ))" "\\n(let [applications (fetch \:application \:where {\:property-id 5} )\\r\\n        clients (fetch \:client)]  \\r\\n  (if (empty? applications)\\r\\n     clients\\r\\n    (first (for [application applications]\\r\\n\\t\\t  (filter (fn [x]\\r\\n\\t\\t  (not\= (x \:_id) (application \:client-id)))\\r\\n\\t\\t          clients)))\\r\\n    ))" "(client-not-have-appication-for-property 5)" "\\n(let [applications (fetch \:application \:where {\:property-id 5} )\\r\\n        clients (fetch \:client)]  \\r\\n  (if (empty? applications)\\r\\n     clients\\r\\n    (first (for [application applications]\\r\\n\\t\\t  (filter (fn [x]\\r\\n\\t\\t  (not\= (x \:_id) (application \:client-id)))\\r\\n\\t\\t          clients)))\\r\\n    ))" "\\n(let [applications (fetch \:application \:where {\:property-id 5} )\\r\\n        clients (fetch \:client)]  \\r\\n  (if (empty? applications)\\r\\n     clients\\r\\n     (for [application applications]\\r\\n\\t\\t  (filter (fn [x]\\r\\n\\t\\t  (not\= (x \:_id) (application \:client-id)))\\r\\n\\t\\t          clients)))\\r\\n    )" "\\n(defn filterClient\\n  [clients]\\n  (filter (fn [x]\\r\\n\\t\\t  (not\= (x \:_id) (application \:client-id)))\\r\\n\\t\\t          clients))\\n\\n(let [applications (fetch \:application \:where {\:property-id 5} )\\r\\n        clients (fetch \:client)]  \\r\\n  (if (empty? applications)\\r\\n     clients\\r\\n     (for [application applications]\\r\\n       (filterClient clients)))\\r\\n    )" "\\n(defn filterClient\\n  [clients]\\n  (filter (fn [x]\\r\\n\\t\\t  (not\= (x \:_id) (application \:client-id)))\\r\\n\\t\\t          clients))\\n\\n(let [applications (fetch \:application \:where {\:property-id 5} )\\r\\n        clients (fetch \:client)]  \\r\\n  (if (empty? applications)\\r\\n     clients\\r\\n     (for [application applications]\\r\\n       (let clients [(filterClient clients)])))\\r\\n    )" "\\n(defn filterClient\\n  [clients]\\n  (filter (fn [x]\\r\\n\\t\\t  (not\= (x \:_id) (application \:client-id)))\\r\\n\\t\\t          clients))\\n\\n(let [applications (fetch \:application \:where {\:property-id 5} )\\r\\n        clients (fetch \:client)]  \\r\\n  (if (empty? applications)\\r\\n     clients\\r\\n     (for [application applications]\\r\\n       (let [clients (filterClient clients)])))\\r\\n    )" "\\n(defn filterClient\\n  [clients]\\n  (filter (fn [x]\\r\\n\\t\\t  (not\= (x \:_id) (application \:client-id)))\\r\\n\\t\\t          clients))\\n\\n(let [applications (fetch \:application \:where {\:property-id 5} )\\r\\n        clients (fetch \:client)]  \\r\\n  (if (empty? applications)\\r\\n     clients\\r\\n     (for [application applications]\\r\\n       (set\! clients (filterClient clients))))\\r\\n    )" "\\n(defn filterClient\\n  [clients]\\n  (filter (fn [x]\\r\\n\\t\\t  (not\= (x \:_id) (application \:client-id)))\\r\\n\\t\\t          clients))\\n\\n(let [applications (fetch \:application \:where {\:property-id 5} )\\r\\n       ]  \\n   (def clients (fetch \:client))\\r\\n  (if (empty? applications)\\r\\n     clients\\r\\n     (for [application applications]\\r\\n       (set\! clients (filterClient clients))))\\r\\n    )" "\\n\\n(let [applications (fetch \:application \:where {\:property-id 5} )\\r\\n       ]  \\n   (def clients (fetch \:client))\\r\\n  (if (empty? applications)\\r\\n     clients\\r\\n     (for [application applications]\\r\\n       (set\! clients   (filter (fn [x]\\r\\n\\t\\t  (not\= (x \:_id) (application \:client-id)))\\r\\n\\t\\t          clients))))\\r\\n    )" "\\n(let [applications (fetch \:application \:where {\:property-id 5} )\\r\\n        clients (fetch \:client)]  \\r\\n  (if (empty? applications)\\r\\n     clients\\r\\n     (for [application applications]\\r\\n\\t\\t  (remove (fn [x]\\r\\n\\t\\t  (not\= (x \:_id) (application \:client-id)))\\r\\n\\t\\t          clients))\\r\\n    ))" "\\n(defn filterClient\\n  [clients]\\n  (remove (fn [x]\\r\\n\\t\\t  (not\= (x \:_id) (application \:client-id)))\\r\\n\\t\\t          clients))\\n\\n(let [applications (fetch \:application \:where {\:property-id 5} )\\r\\n        clients (fetch \:client)]  \\r\\n  (if (empty? applications)\\r\\n     clients\\r\\n     (for [application applications]\\r\\n       (set\! clients (filterClient clients))))\\r\\n    )" "\\n(defn filterClient\\n  [clients]\\n  (remove (fn [x]\\r\\n\\t\\t  (not\= (x \:_id) (application \:client-id)))\\r\\n\\t\\t          clients))\\n\\n(let [applications (fetch \:application \:where {\:property-id 5} )\\r\\n       ]  \\n   (def clients (fetch \:client))\\r\\n  (if (empty? applications)\\r\\n     clients\\r\\n     (for [application applications]\\r\\n       (set\! clients (filterClient clients))))\\r\\n    )" "\\n(defn filterClient\\n  [clients]\\n  (remove (fn [x]\\r\\n\\t\\t  (not\= (x \:_id) (application \:client-id)))\\r\\n\\t\\t          clients))\\n\\n(let [applications (fetch \:application \:where {\:property-id 5} )\\r\\n       ]  \\n   (def ^\:dynamic clients (fetch \:client))\\r\\n  (if (empty? applications)\\r\\n     clients\\r\\n     (for [application applications]\\r\\n       (set\! clients (filterClient clients))))\\r\\n    )" "\\n(defn filterClient\\n  [a]\\n  (remove (fn [x]\\r\\n\\t\\t  (not\= (x \:_id) (application \:client-id)))\\r\\n\\t\\t          a))\\n\\n(let [applications (fetch \:application \:where {\:property-id 5} )\\r\\n       ]  \\n   (def ^\:dynamic clients (fetch \:client))\\r\\n  (if (empty? applications)\\r\\n     clients\\r\\n     (for [application applications]\\r\\n       (set\! clients (filterClient clients))))\\r\\n    )" "\\n(defn filterClient\\n  [a]\\n  (remove (fn [x]\\r\\n\\t\\t  (not\= (x \:_id) (application \:client-id)))\\r\\n\\t\\t          a))\\n\\n(let [applications (fetch \:application \:where {\:property-id 5} )\\r\\n       ]  \\n   (def ^\:dynamic clients (fetch \:client))\\r\\n  (if (empty? applications)\\r\\n     clients\\r\\n     (for [application applications]\\r\\n        (filterClient clients)))\\r\\n    )" "\\n(defn filterClient\\n  [a]\\n  (filter (fn [x]\\r\\n\\t\\t  (not\= (x \:_id) (application \:client-id)))\\r\\n\\t\\t          a))\\n\\n(let [applications (fetch \:application \:where {\:property-id 5} )\\r\\n       ]  \\n   (def ^\:dynamic clients (fetch \:client))\\r\\n  (if (empty? applications)\\r\\n     clients\\r\\n     (for [application applications]\\r\\n        (filterClient clients)))\\r\\n    )" "\\n(defn filterClient\\n  [a]\\n  (filter (fn [x]\\r\\n\\t\\t  (not\= (x \:_id) (application \:client-id)))\\r\\n\\t\\t          a))\\n\\n(let [applications (fetch \:application \:where {\:property-id 5} )\\r\\n       ]  \\n   (def ^\:dynamic clients (fetch \:client))\\r\\n  (if (empty? applications)\\r\\n     clients\\r\\n     (for [application applications]\\r\\n       (set\! clients (filterClient clients))))\\r\\n    )" "\\n(let [applications (fetch \:application \:where {\:property-id 5} )\\r\\n        clients (fetch \:client)]  \\r\\n  (if (empty? applications)\\r\\n     clients\\r\\n     \\r\\n\\t\\t  (remove (fn [x]\\r\\n\\t\\t  (for [application applications]\\n              (not\= (x \:_id) (application \:client-id)))\\r\\n\\t\\t          clients))\\r\\n    ))" "\\n(let [applications (fetch \:application \:where {\:property-id 5} )\\r\\n        clients (fetch \:client)]  \\r\\n  (if (empty? applications)\\r\\n     clients     \\r\\n\\t\\t  (remove (fn [x application applications]\\r\\n\\t\\t  (for [application applications]\\n              (not\= (x \:_id) (application \:client-id)))\\r\\n\\t\\t          clients))\\r\\n    ))" "(defn my-diff-func [X Y] \\r\\n   (reduce \#(remove (fn [x] (\= x %2)) %1) X Y ))\\n(def a [2 3 5])\\r\\n(def b [1 2 3 4 5])\\n(my-diff-func a b)" "(defn my-diff-func [X Y] \\r\\n   (reduce \#(remove (fn [x] (\= x %2)) %1) X Y ))\\n(def a [2 3 5])\\r\\n(def b [1 2 3 4 5])\\n(my-diff-func  b a)" "(defn my-diff-func [X Y] \\r\\n   (reduce \#(remove (fn [x] (\= x %2)) %1) X Y ))\\n(def a (fetch \:application \:where {\:property-id id} ))\\r\\n(def b (fetch \:client))\\n(my-diff-func  b a)" "(defn my-diff-func [X Y] \\r\\n   (reduce \#(remove (fn [x] (\= x %2)) %1) X Y ))\\n(def a (fetch \:application \:where {\:property-id 5} ))\\r\\n(def b (fetch \:client))\\n(my-diff-func  b a)" "(defn my-diff-func [X Y] \\r\\n   (reduce \#(remove (fn [x]  (not\= (x \:_id) (application \:client-id))) X Y ))\\n(def a (fetch \:application \:where {\:property-id 5} ))\\r\\n(def b (fetch \:client))\\n(my-diff-func  b a)" "(defn my-diff-func [X Y] \\r\\n   (reduce \#(remove (fn [x]  (not\= (x \:_id) (application \:client-id))) X Y )))\\n(def a (fetch \:application \:where {\:property-id 5} ))\\r\\n(def b (fetch \:client))\\n(my-diff-func  b a)" "(defn my-diff-func [X Y] \\r\\n   (reduce \#(remove (fn [x] (\= x %2)) %1) X Y ))\\n(def a (fetch \:application \:where {\:property-id 5} ))\\r\\n(def b (fetch \:client))\\n(my-diff-func  b a)" "(defn my-diff-func [X Y] \\r\\n   (reduce \#(remove (fn [x]  (not\= (x \:_id) (application \:client-id))) X Y )))\\n(def a (fetch \:application \:where {\:property-id 5} ))\\r\\n(def b (fetch \:client))\\n(my-diff-func  b a)" "(defn my-diff-func [X Y] \\r\\n   (reduce \#(remove (fn [x]  (not\= (x \:_id) (application \:client-id)))) X Y ))\\n(def a (fetch \:application \:where {\:property-id 5} ))\\r\\n(def b (fetch \:client))\\n(my-diff-func  b a)" "(defn my-diff-func [X Y] \\r\\n   (reduce \#(remove (fn [x] ((not\= (x \:_id) x %2)) %1) X Y ))\\n(def a (fetch \:application \:where {\:property-id 5} ))\\r\\n(def b (fetch \:client))\\n(my-diff-func  b a)" "(defn my-diff-func [X Y] \\r\\n   (reduce \#(remove (fn [x] ((not\= (x \:_id)(application \:client-id)) x %2)) %1) X Y ))\\n(def a (fetch \:application \:where {\:property-id 5} ))\\r\\n(def b (fetch \:client))\\n(my-diff-func  b a)" "(defn my-diff-func [X Y] \\r\\n   (reduce \#(remove (fn [x] (\= x %2)) %1) X Y ))\\n(def a (fetch \:application \:where {\:property-id 5} ))\\r\\n(def b (fetch \:client))\\n(my-diff-func  a b)" "(defn my-diff-func [X Y] \\r\\n   (reduce \#(remove (fn [x] (\= x %1)) %2) X Y ))\\n(def a (fetch \:application \:where {\:property-id 5} ))\\r\\n(def b (fetch \:client))\\n(my-diff-func  a b)" " (somnium.congomongo/destroy\! \:application )" " (somnium.congomongo/drop-coll\! \:application )" "(defn my-diff-func [X Y] \\r\\n   (reduce \#(remove (fn [x] (\= x %2)) %1) X Y ))\\r\\n(def a (fetch \:application \:where {\:property-id 5} ))\\r\\n(def b (fetch \:client))\\r\\n(my-diff-func  a b)" "(defn my-diff-func [X Y] \\r\\n   (reduce \#(remove (fn [x] (\= x %1)) %2) X Y ))\\r\\n(def a (fetch \:application \:where {\:property-id 5} ))\\r\\n(def b (fetch \:client))\\r\\n(my-diff-func  a b)" "(defn my-diff-func [X Y] \\r\\n   (reduce \#(remove (fn [x] (\= x %1)) %2) X Y ))\\r\\n(def applications (fetch \:application \:where {\:property-id 5} ))\\r\\n(def b (fetch \:client))\\n\\r\\n(for [application applications]\\r\\n\\t\\t   (application \:client-id))" "\\r\\n(defn my-diff-func [X Y] \\r\\n   (reduce \#(remove (fn [x] (\= x %1)) %2) X Y ))\\r\\n(def applications (fetch \:application \:where {\:property-id 5} ))\\r\\n(def clients (fetch \:client))\\n\\r\\n(let [del-client(for [application applications]\\r\\n\\t\\t   (application \:client-id))]\\n\\n  (my-diff-func  a b)\\n  )" "\\r\\n(defn my-diff-func [X Y] \\r\\n   (reduce \#(remove (fn [x] (\= x %1)) %2) X Y ))\\r\\n(def applications (fetch \:application \:where {\:property-id 5} ))\\r\\n(def clients (fetch \:client))\\n\\r\\n(let [del-client(for [application applications]\\r\\n\\t\\t   (application \:client-id))]\\n\\n  (my-diff-func  applications clients)\\n  )" "\\r\\n(defn my-diff-func [X Y] \\r\\n   (reduce \#(remove (fn [x] (\= x %1)) %2) X Y ))\\r\\n(let [applications (fetch \:application \:where {\:property-id 5} )\\r\\n clients (fetch \:client)]\\n\\r\\n(let [del-client(for [application applications]\\r\\n\\t\\t   (application \:client-id))]\\n\\n  (my-diff-func  applications clients)\\n  )\\n)" "\\r\\n(defn my-diff-func [X Y] \\r\\n   (reduce \#(remove (fn [x] (\= x %1)) %2) X Y ))\\r\\n(let [applications (fetch \:application \:where {\:property-id 5} )\\r\\n clients (fetch \:client)]\\n\\r\\n(let [del-client(for [application applications]\\r\\n\\t\\t   (application \:client-id))]\\n\\n  del-client\\n  )\\n)" "(contains? (set '(101 102 103)) 102)" "\\r\\n(defn my-diff-func [X Y] \\r\\n   (reduce \#(remove (fn [x] (\= x %1)) %2) X Y ))\\r\\n(let [applications (fetch \:application \:where {\:property-id 5} )\\r\\n clients (fetch \:client)]\\n\\r\\n(let [del-client(for [application applications]\\r\\n\\t\\t   (application \:client-id))]\\n  (remove (fn[x](contains? del-client x)) clients)\\n\\n  )\\n)" "\\r\\n(defn my-diff-func [X Y] \\r\\n   (reduce \#(remove (fn [x] (\= x %1)) %2) X Y ))\\r\\n(let [applications (fetch \:application \:where {\:property-id 5} )\\r\\n clients (fetch \:client)]\\n\\r\\n(let [del-client(for [application applications]\\r\\n\\t\\t   (application \:client-id))]\\n  (remove (fn[x](contains? (set del-client) x)) clients)\\n\\n  )\\n)" "\\r\\n\\r\\n(def applications (fetch \:application \:where {\:property-id 5} )\\r\\n(def clients (fetch \:client)\\r(def del-client(for [application applications]\\r\\n\\t\\t   (application \:client-id))\\n (remove (fn[x](contains? (set del-client) x)) clients)\\n\\n \\n )" "\\r\\n\\r\\n(def applications (fetch \:application \:where {\:property-id 5} )\\r\\n(def clients (fetch \:client)\\r(def del-client(for [application applications]\\r\\n\\t\\t   (application \:client-id))\\n(remove (fn[x](contains? (set del-client) x)) clients)" "\\r\\n\\r\\n(def applications (fetch \:application \:where {\:property-id 5} ))\\r\\n(def clients (fetch \:client)\\r(def del-client(for [application applications]\\r\\n\\t\\t   (application \:client-id))\\n(remove (fn[x](contains? (set del-client) x)) clients)" "\\r\\n\\r\\n(def applications (fetch \:application \:where {\:property-id 5} ))\\r\\n(def clients (fetch \:client)\\r(def del-client(for [application applications]\\r\\n\\t\\t   (application \:client-id)))\\n(remove (fn[x](contains? (set del-client) x)) clients)" "\\r\\n\\r\\n(def applications (fetch \:application \:where {\:property-id 5} ))\\r\\n(def clients (fetch \:client))\\r(def del-client(for [application applications]\\r\\n\\t\\t   (application \:client-id)))\\n(remove (fn[x](contains? (set del-client) x)) clients)" "\\r\\n\\r\\n(def applications (fetch \:application \:where {\:property-id 5} ))\\r\\n(def clients (fetch \:client))\\r(def del-client(for [application applications]\\r\\n\\t\\t   (application \:client-id)))\\n(remove (fn[x](contains? (set del-client) (x \:_id))) clients)" "\\r\\n\\r\\n(let [applications (fetch \:application \:where {\:property-id 5} )\\r\\nclients (fetch \:client)]\\r(def del-client(for [application applications]\\r\\n\\t\\t   (application \:client-id)))\\n(remove (fn[x](contains? (set del-client) (x \:_id))) clients))" "\\r\\n\\r\\n(let [applications (fetch \:application \:where {\:property-id 5} )\\r\\nclients (fetch \:client)]\\r(let [del-client(for [application applications]\\r\\n                                           (application \:client-id))]\\n(remove (fn[x](contains? (set del-client) (x \:_id))) clients)))" "\\r\\n(fetch \:property)" "\\r\\n(fetch-one \:property)" "\\r\\n((fetch-one \:property) \:municipality-name)" "\\r\\n((fetch-one \:property) \:area)" "\\r\\n(fetch-one \:application)" "\\r\\n(fetch \:application)" "(\= \\"Yes\\" \\"Yes\\")" "(\= (fetch-one \:application) \\"Yes\\")" "(\= (fetch-one \:application) \\"No\\")" "(\= ((fetch-one \:application)\:deposit) \\"No\\")" "(\= ((fetch-one \:application)\:deposit) \\"Yes\\")" "(maping-application-form              \\r\\n                             5       \\r\\n                             1\\r\\n                             4\\r\\n                             \\"Yes\\"\\r\\n                             \\"Yes\\"\\r\\n                             nil\\r\\n                             nil)" "(maping-application-form              \\r\\n                             5       \\r\\n                             1\\r\\n                             5\\r\\n                             \\"Yes\\"\\r\\n                             \\"Yes\\"\\r\\n                             nil\\r\\n                             nil)" "(fetch \:client)" "(fetch application)" "(fetch \:application)" "(maping-application-form              \\r\\n                             51    \\r\\n                             5\\r\\n                             2\\r\\n                             \\"Yes\\"\\r\\n                             \\"Yes\\"\\r\\n                             nil\\r\\n                             nil)" "(update-application (maping-application-form              \\r\\n                             51    \\r\\n                             5\\r\\n                             2\\r\\n                             \\"Yes\\"\\r\\n                             \\"Yes\\"\\r\\n                             nil\\r\\n                             nil))" "(fetch-one \:application \:where {\:_id 51})" "(update-application (maping-application-form              \\r\\n                             51    \\r\\n                             5\\r\\n                             2\\r\\n                             \\"No\\"\\r\\n                             \\"No\\"\\r\\n                             nil\\r\\n                             nil))" "(fetch-one \:application \:where {\:_id 51})" "(update-application (maping-application-form              \\r\\n                             51    \\r\\n                             5\\r\\n                             2\\r\\n                             \\"Yes\\"\\r\\n                             \\"Yes\\"\\r\\n                             nil\\r\\n                             nil))" "(fetch-one \:application \:where {\:_id 51})" "(maping-application-form              \\r\\n                             51    \\r\\n                             5\\r\\n                             2\\r\\n                             \\"Yes\\"\\r\\n                             \\"Yes\\"\\r\\n                             nil\\r\\n                             nil)" "(fetch-one \:application \:where {\:_id 51})" "(maping-application-form              \\r\\n                             51    \\r\\n                             5\\r\\n                             2\\r\\n                             \\"Yes\\"\\r\\n                             \\"Yes\\"\\r\\n                             nil\\r\\n                             nil)" "(update-appliction(maping-application-form              \\r\\n                             51    \\r\\n                             5\\r\\n                             2\\r\\n                             \\"Yes\\"\\r\\n                             \\"Yes\\"\\r\\n                             nil\\r\\n                             nil))" "(update-application (maping-application-form              \\r\\n                             51    \\r\\n                             5\\r\\n                             2\\r\\n                             \\"Yes\\"\\r\\n                             \\"Yes\\"\\r\\n                             nil\\r\\n                             nil))" "(fetch \:application)" "(somnium.congomongo/drop-coll\! \:application )" "(fetch \:application)" "(somnium.congomongo/drop-coll\! \:application )" "(fetch \:application)"]
eclipse.preferences.version=1
